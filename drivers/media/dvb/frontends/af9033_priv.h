/*
 * Afatech AF9033 demodulator driver
 *
 * Copyright (C) 2008 Afatech
 * Copyright (C) 2009 Antti Palosaari <crope@iki.fi>
 *
 *    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 *
 * Thanks to TerraTec for a support received.
 */

#ifndef AF9033_PRIV_H
#define AF9033_PRIV_H

#define LOG_PREFIX "af9033"

#define dprintk(var, level, args...) \
	    do { if ((var & level)) printk(args); } while (0)

#define debug_dump(b, l, func) {\
	int loop_; \
	for (loop_ = 0; loop_ < l; loop_++) \
		func("%02x ", b[loop_]); \
	func("\n");\
}

#define deb_info(args...) dprintk(af9033_debug, 0x01, args)

#undef err
#define err(f, arg...)  printk(KERN_ERR     LOG_PREFIX": " f "\n" , ## arg)
#undef info
#define info(f, arg...) printk(KERN_INFO    LOG_PREFIX": " f "\n" , ## arg)
#undef warn
#define warn(f, arg...) printk(KERN_WARNING LOG_PREFIX": " f "\n" , ## arg)

#define LINK 0x00
#define OFDM 0x80

struct regdesc {
	u16 addr;
	u8  val;
};

struct snr_table {
	u32 val;
	u8 snr;
};

/* QPSK SNR lookup table */
static struct snr_table qpsk_snr_table[] = {
	{0x000b4771,  0},
	{0x000c1aed,  1},
	{0x000d0d27,  2},
	{0x000e4d19,  3},
	{0x000e5da8,  4},
	{0x00107097,  5},
	{0x00116975,  6},
	{0x001252d9,  7},
	{0x00131fa4,  8},
	{0x0013d5e1,  9},
	{0x00148e53, 10},
	{0x0015358b, 11},
	{0x0015dd29, 12},
	{0x00168112, 13},
	{0x00170b61, 14},
	{0x0017a532, 15},
	{0x00180f94, 16},
	{0x00186ed2, 17},
	{0x0018b271, 18},
	{0x0018e118, 19},
	{0x0018ff4b, 20},
	{0x00190af1, 21},
	{0x00191451, 22},
	{0xffffffff, 23},
};

/* QAM16 SNR lookup table */
static struct snr_table qam16_snr_table[] = {
	{0x0004f0d5,  0},
	{0x0005387a,  1},
	{0x000573a4,  2},
	{0x0005a99e,  3},
	{0x0005cc80,  4},
	{0x0005eb62,  5},
	{0x0005fecf,  6},
	{0x00060b80,  7},
	{0x00062501,  8},
	{0x00064865,  9},
	{0x00069604, 10},
	{0x0006f356, 11},
	{0x0007706a, 12},
	{0x000804d3, 13},
	{0x00089d1a, 14},
	{0x00093e3d, 15},
	{0x0009e35d, 16},
	{0x000a7c3c, 17},
	{0x000afaf8, 18},
	{0x000b719d, 19},
	{0x000bda6a, 20},
	{0x000c0c75, 21},
	{0x000c3f7d, 22},
	{0x000c5e62, 23},
	{0x000c6c31, 24},
	{0x000c7925, 25},
	{0xffffffff, 26},
};

/* QAM64 SNR lookup table */
static struct snr_table qam64_snr_table[] = {
	{0x000256d0,  0},
	{0x00027a65,  1},
	{0x00029873,  2},
	{0x0002b7fe,  3},
	{0x0002cf1e,  4},
	{0x0002e234,  5},
	{0x0002f409,  6},
	{0x00030046,  7},
	{0x00030844,  8},
	{0x00030a02,  9},
	{0x00030cde, 10},
	{0x00031031, 11},
	{0x0003144c, 12},
	{0x000315dd, 13},
	{0x00031920, 14},
	{0x000322d0, 15},
	{0x000339fc, 16},
	{0x000364a1, 17},
	{0x00038bcc, 18},
	{0x0003c7d3, 19},
	{0x000408cc, 20},
	{0x00043bed, 21},
	{0x00048061, 22},
	{0x0004be95, 23},
	{0x0004fa7d, 24},
	{0x00052405, 25},
	{0x0005570d, 26},
	{0x00059feb, 27},
	{0x0005bf38, 28},
	{0xffffffff, 29},
};

static struct regdesc ofsm_init[] = {
	{0x0051, 0x01},
	{0x0070, 0x0A},
	{0x007E, 0x04},
	{0x0081, 0x0A},
	{0x008A, 0x01},
	{0x008E, 0x01},
	{0x0092, 0x06},
	{0x0099, 0x01},
	{0x009F, 0xE1},
	{0x00A0, 0xCF},
	{0x00A3, 0x01},
	{0x00A5, 0x01},
	{0x00A6, 0x01},
	{0x00A9, 0x00},
	{0x00AA, 0x01},
	{0x00AB, 0x01},
	{0x00B0, 0x01},
	{0x00C0, 0x05},
	{0x00C4, 0x19},
	{0xF000, 0x0F},
	{0xF016, 0x10},
	{0xF017, 0x04},
	{0xF018, 0x05},
	{0xF019, 0x04},
	{0xF01A, 0x05},
	{0xF021, 0x03},
	{0xF022, 0x0A},
	{0xF023, 0x0A},
	{0xF02B, 0x00},
	{0xF02C, 0x01},
	{0xF064, 0x03},
	{0xF065, 0xF9},
	{0xF066, 0x03},
	{0xF067, 0x01},
	{0xF06F, 0xE0},
	{0xF070, 0x03},
	{0xF072, 0x0F},
	{0xF073, 0x03},
	{0xF078, 0x00},
	{0xF087, 0x00},
	{0xF09B, 0x3F},
	{0xF09C, 0x00},
	{0xF09D, 0x20},
	{0xF09E, 0x00},
	{0xF09F, 0x0C},
	{0xF0A0, 0x00},
	{0xF130, 0x04},
	{0xF132, 0x04},
	{0xF144, 0x1A},
	{0xF146, 0x00},
	{0xF14A, 0x01},
	{0xF14C, 0x00},
	{0xF14D, 0x00},
	{0xF14F, 0x04},
	{0xF158, 0x7F},
	{0xF15A, 0x00},
	{0xF15B, 0x08},
	{0xF15D, 0x03},
	{0xF15E, 0x05},
	{0xF163, 0x05},
	{0xF166, 0x01},
	{0xF167, 0x40},
	{0xF168, 0x0F},
	{0xF17A, 0x00},
	{0xF17B, 0x00},
	{0xF183, 0x01},
	{0xF19D, 0x40},
	{0xF1BC, 0x36},
	{0xF1BD, 0x00},
	{0xF1CB, 0xA0},
	{0xF1CC, 0x01},
	{0xF204, 0x10},
	{0xF214, 0x00},
	{0xF40E, 0x0A},
	{0xF40F, 0x40},
	{0xF410, 0x08},
	{0xF55F, 0x0A},
	{0xF561, 0x15},
	{0xF562, 0x20},
	{0xF5DF, 0xFB},
	{0xF5E0, 0x00},
	{0xF5E3, 0x09},
	{0xF5E4, 0x01},
	{0xF5E5, 0x01},
	{0xF5F8, 0x01},
	{0xF5FD, 0x01},
	{0xF600, 0x05},
	{0xF601, 0x08},
	{0xF602, 0x0B},
	{0xF603, 0x0E},
	{0xF604, 0x11},
	{0xF605, 0x14},
	{0xF606, 0x17},
	{0xF607, 0x1F},
	{0xF60E, 0x00},
	{0xF60F, 0x04},
	{0xF610, 0x32},
	{0xF611, 0x10},
	{0xF707, 0xFC},
	{0xF708, 0x00},
	{0xF709, 0x37},
	{0xF70A, 0x00},
	{0xF78B, 0x01},
	{0xF80F, 0x40},
	{0xF810, 0x54},
	{0xF811, 0x5A},
	{0xF905, 0x01},
	{0xFB06, 0x03},
	{0xFD8B, 0x00}
};

/* Infineon TUA 9001 tuner init
   AF9033_TUNER_TUA9001    = 0x27 */
static struct regdesc tuner_init_tua9001[] = {
	{0x0046, 0x27},
	{0x0057, 0x00},
	{0x0058, 0x01},
	{0x005f, 0x00},
	{0x0060, 0x00},
	{0x006d, 0x00},
	{0x0071, 0x05},
	{0x0072, 0x02},
	{0x0074, 0x01},
	{0x0075, 0x03},
	{0x0076, 0x02},
	{0x0077, 0x00},
	{0x0078, 0x01},
	{0x0079, 0x00},
	{0x007a, 0x7E},
	{0x007b, 0x3E},
	{0x0093, 0x00},
	{0x0094, 0x01},
	{0x0095, 0x02},
	{0x0096, 0x01},
	{0x0098, 0x0A},
	{0x009b, 0x05},
	{0x009c, 0x80},
	{0x00b3, 0x00},
	{0x00c1, 0x01},
	{0x00c2, 0x00},
	{0xF007, 0x00},
	{0xF01F, 0x82},
	{0xF020, 0x00},
	{0xF029, 0x82},
	{0xF02A, 0x00},
	{0xF047, 0x00},
	{0xF054, 0x00},
	{0xF055, 0x00},
	{0xF077, 0x01},
	{0xF1E6, 0x00},
};

/* NXP TDA18218 tuner init
   AF9033_TUNER_TDA18218   = 161 */
static struct regdesc tuner_init_tda18218[] = {
        {0x0046, 0x27},
        {0x0071, 0x05},
        {0x0072, 0x02},
        {0x0074, 0x01},
        {0x0075, 0x03},
        {0x0076, 0x02},
        {0x0077, 0x00},
        {0x0078, 0x01},
        {0x007a, 0x7e},
        {0x007b, 0x3e},
        {0x0098, 0x0a},
        {0x00b3, 0x00},
        {0xf007, 0x00},
        {0xf01f, 0x82},
        {0xf020, 0x00},
        {0xf047, 0x00},
        {0xf077, 0x01},
        {0xf1e6, 0x00},
        {0x0057, 0x00},
        {0x0058, 0x01},
        {0x005f, 0x00},
        {0x0060, 0x00},
        {0x006d, 0x00},
        {0x0079, 0x00},
        {0x0093, 0x00},
        {0x0094, 0x01},
        {0x0095, 0x02},
        {0x0096, 0x01},
        {0x009b, 0x05},
        {0x009c, 0x80},
        {0x00c1, 0x01},
        {0x00c2, 0x00},
        {0xf029, 0x82},
        {0xf02a, 0x00},
        {0xf054, 0x00},
        {0xf055, 0x00},
};

static struct regdesc tuner_init_mxl5007t[] = {
	{0x0046, 0x1b},
	{0x0057, 0x01},
	{0x0058, 0x01},
	{0x005f, 0x00},
	{0x0060, 0x00},
	{0x0068, 0x96},
	{0x0071, 0x05},
	{0x0072, 0x02},
	{0x0074, 0x01},
	{0x0079, 0x01},
	{0x0093, 0x00},
	{0x0094, 0x00},
	{0x0095, 0x00},
	{0x0096, 0x00},
	{0x00b3, 0x01},
	{0x00c1, 0x01},
	{0x00c2, 0x00},
	{0xF007, 0x00},
	{0xF00C, 0x19},
	{0xF00D, 0x1a},
	{0xF012, 0xda},
	{0xF013, 0x00},
	{0xF014, 0x00},
	{0xF015, 0x02},
	{0xF01F, 0x82},
	{0xF020, 0x00},
	{0xF029, 0x82},
	{0xF02A, 0x00},
	{0xF077, 0x02},
	{0xF1E6, 0x00},
};

#endif /* AF9033_PRIV_H */

